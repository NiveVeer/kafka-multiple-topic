/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro.consumer.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Sample schema */
@org.apache.avro.specific.AvroGenerated
public class master_nf extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3780193526265671828L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"master_nf\",\"namespace\":\"avro.consumer.model\",\"doc\":\"Sample schema\",\"fields\":[{\"name\":\"disposition\",\"type\":[\"null\",\"string\"]},{\"name\":\"contract_status\",\"type\":[\"null\",\"string\"]},{\"name\":\"insurence_letter\",\"type\":[\"null\",\"int\"]},{\"name\":\"booking_date\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"date\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<master_nf> ENCODER =
      new BinaryMessageEncoder<master_nf>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<master_nf> DECODER =
      new BinaryMessageDecoder<master_nf>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<master_nf> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<master_nf> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<master_nf> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<master_nf>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this master_nf to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a master_nf from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a master_nf instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static master_nf fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence disposition;
  private java.lang.CharSequence contract_status;
  private java.lang.Integer insurence_letter;
  private java.lang.Long booking_date;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public master_nf() {}

  /**
   * All-args constructor.
   * @param disposition The new value for disposition
   * @param contract_status The new value for contract_status
   * @param insurence_letter The new value for insurence_letter
   * @param booking_date The new value for booking_date
   */
  public master_nf(java.lang.CharSequence disposition, java.lang.CharSequence contract_status, java.lang.Integer insurence_letter, java.lang.Long booking_date) {
    this.disposition = disposition;
    this.contract_status = contract_status;
    this.insurence_letter = insurence_letter;
    this.booking_date = booking_date;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return disposition;
    case 1: return contract_status;
    case 2: return insurence_letter;
    case 3: return booking_date;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: disposition = (java.lang.CharSequence)value$; break;
    case 1: contract_status = (java.lang.CharSequence)value$; break;
    case 2: insurence_letter = (java.lang.Integer)value$; break;
    case 3: booking_date = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'disposition' field.
   * @return The value of the 'disposition' field.
   */
  public java.lang.CharSequence getDisposition() {
    return disposition;
  }


  /**
   * Sets the value of the 'disposition' field.
   * @param value the value to set.
   */
  public void setDisposition(java.lang.CharSequence value) {
    this.disposition = value;
  }

  /**
   * Gets the value of the 'contract_status' field.
   * @return The value of the 'contract_status' field.
   */
  public java.lang.CharSequence getContractStatus() {
    return contract_status;
  }


  /**
   * Sets the value of the 'contract_status' field.
   * @param value the value to set.
   */
  public void setContractStatus(java.lang.CharSequence value) {
    this.contract_status = value;
  }

  /**
   * Gets the value of the 'insurence_letter' field.
   * @return The value of the 'insurence_letter' field.
   */
  public java.lang.Integer getInsurenceLetter() {
    return insurence_letter;
  }


  /**
   * Sets the value of the 'insurence_letter' field.
   * @param value the value to set.
   */
  public void setInsurenceLetter(java.lang.Integer value) {
    this.insurence_letter = value;
  }

  /**
   * Gets the value of the 'booking_date' field.
   * @return The value of the 'booking_date' field.
   */
  public java.lang.Long getBookingDate() {
    return booking_date;
  }


  /**
   * Sets the value of the 'booking_date' field.
   * @param value the value to set.
   */
  public void setBookingDate(java.lang.Long value) {
    this.booking_date = value;
  }

  /**
   * Creates a new master_nf RecordBuilder.
   * @return A new master_nf RecordBuilder
   */
  public static avro.consumer.model.master_nf.Builder newBuilder() {
    return new avro.consumer.model.master_nf.Builder();
  }

  /**
   * Creates a new master_nf RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new master_nf RecordBuilder
   */
  public static avro.consumer.model.master_nf.Builder newBuilder(avro.consumer.model.master_nf.Builder other) {
    if (other == null) {
      return new avro.consumer.model.master_nf.Builder();
    } else {
      return new avro.consumer.model.master_nf.Builder(other);
    }
  }

  /**
   * Creates a new master_nf RecordBuilder by copying an existing master_nf instance.
   * @param other The existing instance to copy.
   * @return A new master_nf RecordBuilder
   */
  public static avro.consumer.model.master_nf.Builder newBuilder(avro.consumer.model.master_nf other) {
    if (other == null) {
      return new avro.consumer.model.master_nf.Builder();
    } else {
      return new avro.consumer.model.master_nf.Builder(other);
    }
  }

  /**
   * RecordBuilder for master_nf instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<master_nf>
    implements org.apache.avro.data.RecordBuilder<master_nf> {

    private java.lang.CharSequence disposition;
    private java.lang.CharSequence contract_status;
    private java.lang.Integer insurence_letter;
    private java.lang.Long booking_date;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(avro.consumer.model.master_nf.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.disposition)) {
        this.disposition = data().deepCopy(fields()[0].schema(), other.disposition);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.contract_status)) {
        this.contract_status = data().deepCopy(fields()[1].schema(), other.contract_status);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.insurence_letter)) {
        this.insurence_letter = data().deepCopy(fields()[2].schema(), other.insurence_letter);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.booking_date)) {
        this.booking_date = data().deepCopy(fields()[3].schema(), other.booking_date);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing master_nf instance
     * @param other The existing instance to copy.
     */
    private Builder(avro.consumer.model.master_nf other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.disposition)) {
        this.disposition = data().deepCopy(fields()[0].schema(), other.disposition);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.contract_status)) {
        this.contract_status = data().deepCopy(fields()[1].schema(), other.contract_status);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.insurence_letter)) {
        this.insurence_letter = data().deepCopy(fields()[2].schema(), other.insurence_letter);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.booking_date)) {
        this.booking_date = data().deepCopy(fields()[3].schema(), other.booking_date);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'disposition' field.
      * @return The value.
      */
    public java.lang.CharSequence getDisposition() {
      return disposition;
    }


    /**
      * Sets the value of the 'disposition' field.
      * @param value The value of 'disposition'.
      * @return This builder.
      */
    public avro.consumer.model.master_nf.Builder setDisposition(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.disposition = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'disposition' field has been set.
      * @return True if the 'disposition' field has been set, false otherwise.
      */
    public boolean hasDisposition() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'disposition' field.
      * @return This builder.
      */
    public avro.consumer.model.master_nf.Builder clearDisposition() {
      disposition = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'contract_status' field.
      * @return The value.
      */
    public java.lang.CharSequence getContractStatus() {
      return contract_status;
    }


    /**
      * Sets the value of the 'contract_status' field.
      * @param value The value of 'contract_status'.
      * @return This builder.
      */
    public avro.consumer.model.master_nf.Builder setContractStatus(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.contract_status = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'contract_status' field has been set.
      * @return True if the 'contract_status' field has been set, false otherwise.
      */
    public boolean hasContractStatus() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'contract_status' field.
      * @return This builder.
      */
    public avro.consumer.model.master_nf.Builder clearContractStatus() {
      contract_status = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'insurence_letter' field.
      * @return The value.
      */
    public java.lang.Integer getInsurenceLetter() {
      return insurence_letter;
    }


    /**
      * Sets the value of the 'insurence_letter' field.
      * @param value The value of 'insurence_letter'.
      * @return This builder.
      */
    public avro.consumer.model.master_nf.Builder setInsurenceLetter(java.lang.Integer value) {
      validate(fields()[2], value);
      this.insurence_letter = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'insurence_letter' field has been set.
      * @return True if the 'insurence_letter' field has been set, false otherwise.
      */
    public boolean hasInsurenceLetter() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'insurence_letter' field.
      * @return This builder.
      */
    public avro.consumer.model.master_nf.Builder clearInsurenceLetter() {
      insurence_letter = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'booking_date' field.
      * @return The value.
      */
    public java.lang.Long getBookingDate() {
      return booking_date;
    }


    /**
      * Sets the value of the 'booking_date' field.
      * @param value The value of 'booking_date'.
      * @return This builder.
      */
    public avro.consumer.model.master_nf.Builder setBookingDate(java.lang.Long value) {
      validate(fields()[3], value);
      this.booking_date = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'booking_date' field has been set.
      * @return True if the 'booking_date' field has been set, false otherwise.
      */
    public boolean hasBookingDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'booking_date' field.
      * @return This builder.
      */
    public avro.consumer.model.master_nf.Builder clearBookingDate() {
      booking_date = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public master_nf build() {
      try {
        master_nf record = new master_nf();
        record.disposition = fieldSetFlags()[0] ? this.disposition : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.contract_status = fieldSetFlags()[1] ? this.contract_status : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.insurence_letter = fieldSetFlags()[2] ? this.insurence_letter : (java.lang.Integer) defaultValue(fields()[2]);
        record.booking_date = fieldSetFlags()[3] ? this.booking_date : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<master_nf>
    WRITER$ = (org.apache.avro.io.DatumWriter<master_nf>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<master_nf>
    READER$ = (org.apache.avro.io.DatumReader<master_nf>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.disposition == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.disposition);
    }

    if (this.contract_status == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.contract_status);
    }

    if (this.insurence_letter == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.insurence_letter);
    }

    if (this.booking_date == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeLong(this.booking_date);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.disposition = null;
      } else {
        this.disposition = in.readString(this.disposition instanceof Utf8 ? (Utf8)this.disposition : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.contract_status = null;
      } else {
        this.contract_status = in.readString(this.contract_status instanceof Utf8 ? (Utf8)this.contract_status : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.insurence_letter = null;
      } else {
        this.insurence_letter = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.booking_date = null;
      } else {
        this.booking_date = in.readLong();
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.disposition = null;
          } else {
            this.disposition = in.readString(this.disposition instanceof Utf8 ? (Utf8)this.disposition : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.contract_status = null;
          } else {
            this.contract_status = in.readString(this.contract_status instanceof Utf8 ? (Utf8)this.contract_status : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.insurence_letter = null;
          } else {
            this.insurence_letter = in.readInt();
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.booking_date = null;
          } else {
            this.booking_date = in.readLong();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










